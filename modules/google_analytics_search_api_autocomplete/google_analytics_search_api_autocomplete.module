<?php

/**
 * @file
 * Provides base hooks for google_analytics_search_api_autocomplete module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_page_attachments().
 */
function google_analytics_search_api_autocomplete_page_attachments(array &$attachments) {
  // Skip the code when there's nothing attached to page at all.
  if (!isset($attachments['#attached']['html_head'])) {
    return;
  }

  // Get GA property ID from google_analytics settings.
  $ga_account = \Drupal::config('google_analytics.settings')->get('account');

  if ($ga_account) {
    // When google_analytics code is initialazed,
    // prepare and create GA tracker for search api autocomplete.
    // We attach ga('create') script to head to make sure that
    // this peace of JS code will run only once.
    foreach ($attachments['#attached']['html_head'] as $attachment) {
      if (end($attachment) == 'google_analytics_tracking_script') {
        $settings = \Drupal::config('google_analytics_search_api_autocomplete.admin_settings');
        $debug_mode = $debug_mode = $settings->get('debug_mode');
        $cookie_domain = $debug_mode ? 'none' : 'auto';
        $script = 'ga("create", "' . $ga_account . '", "' . $cookie_domain . '", "searchApiAutocomplete");';
        $attachments['#attached']['html_head'][] = [
          [
            '#tag' => 'script',
            '#value' => $script,
          ],
          'google_analytics_search_api_autocomplete_tracker',
        ];
      }
    }
  }
}

/**
 * Implements hook_element_info_alter().
 */
function google_analytics_search_api_autocomplete_element_info_alter(array &$info) {
  $info['search_api_autocomplete']['#process'][] = 'google_analytics_search_api_autocomplete_process';
}

/**
 * Custom process callback form search_api_autocomplete element.
 *
 * @param array $element
 *   The search_api_autocomplete element to process.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of form containing widget.
 * @param array $complete_form
 *   The complete form structure.
 *
 * @return array
 *   The processed form element.
 */
function google_analytics_search_api_autocomplete_process(array &$element, FormStateInterface $form_state, array &$complete_form) {
  // Get settings of google_analytics module,
  // and extract tracking ID of GA property.
  $ga_account = \Drupal::config('google_analytics.settings')->get('account');

  // Get module configuration, extract autocomplete events and debug mode.
  $settings = \Drupal::config('google_analytics_search_api_autocomplete.admin_settings');
  $autocomplete_events = $settings->get('autocomplete_events');
  $debug_mode = $settings->get('debug_mode');

  // If google_analytics module is configured
  // attach JS library to the element + configure drupalSettings.
  if ($ga_account) {
    $element['#attached']['library'][] = 'google_analytics_search_api_autocomplete/google_analytics_search_api_autocomplete';

    $js_settings = [
      'ga_account' => $ga_account,
      'search_api_search_id' => $element['#search_id'],
      'cookie_domain' => $debug_mode ? 'none' : 'auto',
      'tracker_id' => 'searchApiAutocomplete',
    ];

    foreach ($autocomplete_events as $event => $settings) {
      if ($settings['enabled']) {
        $js_settings['ga_events'][$event] = $settings['label'];
      }
    }

    $element['#attached']['drupalSettings']['google_analytics_search_api_autocomplete'] = $js_settings;
  }

  return $element;
}

/**
 * Implements hook_help().
 */
function google_analytics_search_api_autocomplete_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.google_analytics_search_api_autocomplete':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module integrates <a href=":search_api_autocomplete">Search API Autocomplete</a> widgets with <a href=":google_analytics">Google Analytics</a> module.', [':search_api_autocomplete' => 'https://www.drupal.org/project/search_api_autocomplete', ':google_analytics' => 'https://www.drupal.org/project/google_analytics']) . '</p>';
      $output .= '<p>' . t('It will give you full insights about how your users use search autocomplete features on your search pages, by tracking Jquery UI Autocomplete events.') . '</p>';
      $output .= '<h3>' . t('Usage') . '</h3>';
      $output .= '<dt>' . t('Configuring the module') . '</dt>';
      $output .= '<dd>' . t('All settings for this module can be found on the <a href=":settings">Google Analytics Search API Autocomplete settings</a> page. Basically you need to choose which autocmomplete events you want to track.', [':settings' => Url::fromRoute('google_analytics_search_api_autocomplete.admin_settings_form')->toString()]) . '</dd>';
      $output .= '<dt>' . t('Testing on local environment') . '</dt>';
      $output .= '<dd>' . t('As you can spot in configuration form, you can also set cookieDomain to "none", this is useful option for debugging GA Events on your local machine.') . '</dd>';
      $output .= '<dt>' . t('Event tracking') . '</dt>';
      $output .= '<dd>' . t('Once you have configured the module, clear the cache, then navigate to the Search API page and perform some search actions. You should be able to see the effects immediately, in Google Analytics Real time reports ( Real-time > Events).') . '</dd>';
      $output .= '<h3>' . t('Useful links') . '</h3>';
      $output .= '<ul><li>' . t('<a href=":ga_event_tracking">Google Analytics - Events tracking</a>', [':ga_event_tracking' => 'https://developers.google.com/analytics/devguides/collection/analyticsjs/events']) . '</li>';
      $output .= '<li>' . t('<a href=":ga_cookie_domain">Google Analytics - cookie domain configuration</a>', [':ga_cookie_domain' => 'https://developers.google.com/analytics/devguides/collection/analyticsjs/cookies-user-id#automatic_cookie_domain_configuration']) . '</li>';
      $output .= '<li>' . t('<a href=":ui_autocomplete">jQuery UI Autocomplete</a>', [':ui_autocomplete' => 'https://jqueryui.com/autocomplete']) . '</li>';
      $output .= '<li>' . t('<a href=":ga_debugging_tools">Google Analytics debugger for Chrome</a>', [':ga_debugging_tools' => 'https://chrome.google.com/webstore/detail/google-analytics-debugger/jnkmfdileelhofjcijamephohjechhna']) . '</li></ul>';
      return $output;
  }
}
